Best Bus Ever

Create a program that manages the bus company “Best Bus Ever”.

Your program will serve both company managers and passengers.
Managers and passengers can perform different actions.
In general, managers can add/delete/update bus routes and schedules while passengers can search for routes and report delays.

You should implement at least 3 classes in your program:

BusRoute:
Stores and manages the following information:
line number
origin
destination
list of stops (ordered)
scheduled rides


ScheduledRide:
Stores and manages the following information:
id (a number generated by the system)
origin time
destination time
driver name
delays

BestBusCompany:
Stores and manages information about the whole company, including:
All the routes and schedules
All the actions defined earlier

The program starts with the Main Menu. At this stage, the user should select whether he is a manager or a passenger.

If “manager” is selected, the program should ask for a password for authentication. The correct password for the manager is RideWithUs!
If the password was inserted correctly, the manager is logged in. Otherwise, allow 3 tries of inserting a password, and if the password wasn’t correct, exit the program with a relevant error message.

After the manager has logged in, the program will display the user Manager menu where he can perform one of the following actions: “add_route”, “delete_route”, “update_route”, “add_scheduled_ride”.

If “passenger” is selected in the main menu, there is no need for authentication, and Passenger Menu is displayed to the user, where he can perform one of the following actions: search_route, report_delay

Manager actions:

add_route: requires to insert line number, origin, destination of the route (two strings) and list of stops (text separated by commas) and stores the route within your program.
Note: line number is a unique identifier of the route (i.e. there should not be more than one route with the same number in the company)

delete_route: requires to insert line number and deletes relevant bus route and all the data associated with it from the program.
Make sure to ask the user “Are you sure” before deleting.

update_route: user inserts a line number, the program displays him an information regarding this line, and allows user to change origin, destination or list of stops

add_scheduled_ride: given a line number, display user all the existing rides for this line, and allow the user to add a new one. During addition of a new ride, the user will enter: origin time, destination time, driver name for the ride. Note, recorded_delays should be initialized to 0. Managers should not update this field, only passengers will be able to update this field by reporting delay.

Passenger actions:

search_route: allow passengers to get all the information except for driver names for the specific route (including all the rides with their ids, times and delays). The passenger can search the route by: line number, origin, destination, bus stop.

report_delay: allow users to search a route (like in search_route) and after the route is found, ask the user to specify a ride from the rides displayed to him (by id) and record a single delay for it.


Instructions:
During your work on this program, you will have to decide how to store all the information, which collections to use and how to implement every action.
In addition, it is extremely important to make your code clear and manageable by dividing it into classes and functions. You also should avoid code duplication!
Make sure to separate backend (a.k.a business-logic classes, data management) from the front-end (a.k.a UI - menus, inputs, outputs)
Note, the front-end part like menus, inputs, outputs can also be divided into classes for better management. For example, you can create MainMenu class, ManagerMenu class, PassengerMenu class.
Don’t forget to use private and protected attributes and methods (__, _)
Note, the system is initialized as “empty” - no routes, no rides, however you should remember to persist the state of your system, such that all the data inserted by the users will be preserved and loaded next time the system starts. I suggest that you use the pickle package, and store the whole class BestBusCompany as a single object. Since this class contains all the other objects, serializing this object into a pickle file will persist all the data in your system.
In general, I suggest that your main.py will look similar to:

if __name__ == '__main__':

   # check whether this is the first time you run the app
   # if this is the first time - create a new class
   if not os.path.exists('bus_company.pickle'):
       bus_company = BestBusCompany()
   else:
       # this is not the first time - we already have a DB
       # with data from the previous runs
       with open('bus_company.pickle', 'rb') as fh:
           bus_company = pickle.load(fh)

   #
   # here comes your code that runs main menu
   # and interacts with the user and adds/ updates
   # data in your bus_company class


   # before exiting the program, persist the current state
   # of te system in the file, so next time it will be loaded
   with open('bus_company.pickle', 'wb') as fh:
        pickle.dump(bus_company, fh)

	I also suggest that you read a bit about os python module, and especially os.path
module that allows various checks and operations on files and directories
